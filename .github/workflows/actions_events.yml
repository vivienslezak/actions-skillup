name: actions_events
on:
  push:
    branches: [ envvar ]
#    tags: [ 'v[0-9]+.[0-9]+.[0-9]+' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.sha }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  checkout-repo:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

  check-values:
    needs: checkout-repo
    runs-on: ubuntu-latest
    steps:
      - name: Set open-pr output
        id: set-open-pr
        run: |
          OPEN_PR_COUNT=$(curl -s -H "Authorization: token ${{ secrets.TEST_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls" | grep '\"state\"\: \"open\"' | wc -l)
          echo "$OPEN_PR_COUNT"
          if [ "$OPEN_PR_COUNT" -eq "0" ]; then
            echo "open-pr=false" >> "$GITHUB_OUTPUT"
          else
            echo "open-pr=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Set tag-run output
        id: set-tag-run
        run: |
          LATEST_TAG=$(curl -s -H "Authorization: token ${{ secrets.TEST_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/tags" | jq -r '.[0].name')
          LATEST_TAG_SHA=$(curl -s -H "Authorization: token ${{ secrets.TEST_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/tags" | jq -r '.[0].commit.sha')
          if [[ $LATEST_TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] && [[ $LATEST_TAG_SHA == ${{ github.sha }} ]]; then
            echo "tag-run=true" >> "$GITHUB_OUTPUT"
          else
            echo "tag-run=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Set workflow-run output
        id: set-workflow-run
        run: |
          if [[ ${{ steps.set-open-pr.outputs.open-pr }} == 'true' ]] && [[ ${{ github.event_name }} == 'push' ]] && [[ ${{ github.ref_type }} == 'branch' ]]; then
            echo "workflow-run=false" >> "$GITHUB_OUTPUT"
          else
            echo "workflow-run=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Set dir-change output
        id: set-dir-change
        run: |
          ROOT_CH=$(git diff --name-only HEAD~1 HEAD | grep -v "/" | grep -v "README.md" | grep -v "changelog.txt" | grep -v ".version" | wc -l)
          echo "files changed in root: $ROOT_CH"
          GITLAB_CH=$(git diff --dirstat=files,0 HEAD~1 HEAD | awk -F' ' '{print $2}' | grep "^\.gitlab/" | wc -l)
          echo "Gitlab dir changed: $GITLAB_CH"
          CPMAP_CH=$(git diff --dirstat=files,0 HEAD~1 HEAD | awk -F' ' '{print $2}' | grep "^cpmap/$" | wc -l)
          echo "cpmap dir changed: $CPMAP_CH"
          CPMAP_PROJECTS_CH=$(git diff --dirstat=files,0 HEAD~1 HEAD | awk -F' ' '{print $2}' | grep "^cpmap-projects/$" | wc -l)
          echo "cpmap-projects dir changed: $CPMAP_PROJECTS_CH"
          CPMAP_NAVU_PROJECTS_CH=$(git diff --dirstat=files,0 HEAD~1 HEAD | awk -F' ' '{print $2}' | grep "^cpmap-projects/navu-cpmap/$" | wc -l)
          echo "cpmap-projects-navu dir changed: $CPMAP_NAVU_PROJECTS_CH"
          CPMAP_MTU_PROJECTS_CH=$(git diff --dirstat=files,0 HEAD~1 HEAD | awk -F' ' '{print $2}' | grep "^cpmap-projects/mtu-cpmap/$" | wc -l)
          echo "cpmap-projects-mtu dir changed: $CPMAP_MTU_PROJECTS_CH"
          CPMAP_KEYMANAGER_CH=$(git diff --dirstat=files,0 HEAD~1 HEAD | awk -F' ' '{print $2}' | grep "^cpmap/cpmap-keymanager/$" | wc -l)
          echo "cpmap-keymanager dir changed: $CPMAP_KEYMANAGER_CH"
          CPMAP_TEST_COMMON_CH=$(git diff --dirstat=files,0 HEAD~1 HEAD | awk -F' ' '{print $2}' | grep -E "^cpmap/cpmap-aes-keymanager/$|^cpmap/cpmap-common/$|^cpmap/cpmap-keygenerator/$|^cpmap/cpmap-collector/$|^cpmap/cpmap-collector-offline/$|^cpmap/cpmap-mock-lem/$|^cpmap/cpmap-mock-source/$|^cpmap/cpmap-source-offline/$|^cpmap/cpmap-plugin/$" | wc -l)
          echo "cpmap-test-common dir changed: $CPMAP_TEST_COMMON_CH"
          CPMAP_TEST_MAPPER_CH=$(git diff --dirstat=files,0 HEAD~1 HEAD | awk -F' ' '{print $2}' | grep -E "^cpmap/cpmap-mapper/$|^cpmap/cpmap-test-integration/$" | wc -l)
          echo "cpmap test-mapper changed: $CPMAP_TEST_MAPPER_CH"
          if [ "$GITLAB_CH" -ge "1" ]; then
            echo "gitlab-ch=true" >> "$GITHUB_OUTPUT"
          elif [ "$ROOT_CH" -ge "1" ]; then
            echo "root-ch=true" >> "$GITHUB_OUTPUT"
          elif [ "$CPMAP_CH" -ge "1" ]; then
            echo "cpmap-ch=true" >> "$GITHUB_OUTPUT"
          elif [ "$CPMAP_PROJECTS_CH" -ge "1" ]; then
            echo "cpmap-projects-ch=true" >> "$GITHUB_OUTPUT"
          elif [ "$CPMAP_NAVU_PROJECTS_CH" -ge "1" ]; then
            echo "cpmap-navu-projects-ch=true" >> "$GITHUB_OUTPUT"
          elif [ "$CPMAP_MTU_PROJECTS_CH" -ge "1" ]; then
            echo "cpmap-mtu-projects-ch=true" >> "$GITHUB_OUTPUT"
          elif [ "$CPMAP_KEYMANAGER_CH" -ge "1" ]; then
            echo "cpmap-keymanager-ch=true" >> "$GITHUB_OUTPUT"
          elif [ "$CPMAP_TEST_COMMON_CH" -ge "1" ]; then
            echo "cpmap-test-common-ch=true" >> "$GITHUB_OUTPUT"
          elif [ "$CPMAP_TEST_MAPPER_CH" -ge "1" ]; then
            echo "cpmap-test-mapper-ch=true" >> "$GITHUB_OUTPUT"
          fi

    outputs:
      open-pr: ${{ steps.set-open-pr.outputs.open-pr }}
      tag-run: ${{ steps.set-tag-run.outputs.tag-run }}
      workflow-run: ${{ steps.set-workflow-run.outputs.workflow-run }}
      gitlab-ch: ${{ steps.set-dir-change.outputs.gitlab-ch }}
      root-ch: ${{ steps.set-dir-change.outputs.root-ch }}
      cpmap-ch: ${{ steps.set-dir-change.outputs.cpmap-ch }}
      cpmap-projects-ch: ${{ steps.set-dir-change.outputs.cpmap-projects-ch }}
      cpmap-navu-projects-ch: ${{ steps.set-dir-change.outputs.cpmap-navu-projects-ch }}
      cpmap-mtu-projects-ch: ${{ steps.set-dir-change.outputs.cpmap-mtu-projects-ch }}
      cpmap-keymanager-ch: ${{ steps.set-dir-change.outputs.cpmap-keymanager-ch }}
      cpmap-test-common-ch: ${{ steps.set-dir-change.outputs.cpmap-test-common-ch }}
      cpmap-test-mapper-ch: ${{ steps.set-dir-change.outputs.cpmap-test-mapper-ch }}

# WORKS
# IF no open merge PR present AND push event AND ref type is branch -> run
# This rule is equivalent to GL workflow rules (1)!
  run-rules-1:
    needs: check-values
    if: ${{ needs.check-values.outputs.workflow-run == 'true' }}
    runs-on: ubuntu-latest
    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4

      - name: Run tests
        run: |
          echo "Variable values - event name: ${{ github.event_name }} , ref: ${{ github.ref }} , ref type: ${{ github.ref_type }} , opr head ref: ${{ github.head_ref }} , opr base ref: ${{ github.base_ref }} , ref name: ${{ github.ref_name }} , commit_message: ${{ github.event.head_commit.message }} ."
          echo "Custom outputs values - open-pr: ${{ needs.check-values.outputs.open-pr }} , workflow-run: ${{ needs.check-values.outputs.workflow-run}} , tag-run: ${{ needs.check-values.outputs.tag-run }} ."

# WORKS
# IF workflow rules are true AND tag is present on the latest commit AND push event -> run
# Translates to GL REPORTING rules (2)!
  run-rules-2:
    needs: check-values
    if: ${{ needs.check-values.outputs.workflow-run == 'true' && needs.check-values.outputs.tag-run == 'true' && github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run tests
        run: |
          echo "Rules 2 matched."

# WORKS
# IF commit message 'DEPLOYME' OR commit branch is develop OR commit tag is regex match -> run
# This would translate to PUBLISH-CPMAP and PROJECTS-PHASE1 rules (3)!
  run-rules-3:
    needs: check-values
    if: ${{ needs.check-values.outputs.workflow-run == 'true' && (needs.check-values.outputs.tag-run == 'true' || github.event.head_commit.message == 'DEPLOYME' || github.ref_name == 'envvar' ) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run tests
        run: |
          echo "Rules 3 matched."

# WORKS
# IF commit branch is develop OR commit tag is regex match -> run
# This would translate to PROJECTS-PHASE2 rules (4)!
  run-rules-4:
    needs: check-values
    if: ${{ needs.check-values.outputs.workflow-run == 'true' && (needs.check-values.outputs.tag-run == 'true' || github.ref_name == 'envvar' ) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run tests
        run: |
          echo "Rules 4 matched."

# IF commit message 'DEPLOYME' OR commit branch is develop OR commit tag is regex match /
# OR branch assoicated with commit AND not develop branch AND changes happen on paths /
# OR Pull Request target branch is develop -> run
# This would translate to BUILD:mtu-cpmap and BUILD:navu-cpmap rules (5)!
  run-rules-5:
    needs: check-values
    if: ${{ needs.check-values.outputs.workflow-run == 'true' && (needs.check-values.outputs.tag-run == 'true' || github.event.head_commit.message == 'DEPLOYME' || github.ref_name == 'envvar' || github.base_ref == 'envvar' || github.ref_type == 'branch' && github.ref_name != 'envvar' ) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Run tests
        run: |
          echo "gitlab dir: ${{ needs.check-values.outputs.gitlab-ch }} , root dir: ${{ needs.check-values.outputs.root-ch }} , cpmap dir: ${{ needs.check-values.outputs.cpmap-ch }} , cpmap-projects dir: ${{ needs.check-values.outputs.cpmap-projects-ch }} , cpmap-navu dir: ${{ needs.check-values.outputs.cpmap-navu-projects-ch }} , cpmap-mtu dir: ${{ needs.check-values.outputs.cpmap-mtu-projects-ch }} , cpmap-keymanager dir: ${{ needs.check-values.outputs.cpmap-keymanager-ch }} , cpmap-test common dir: ${{ needs.check-values.outputs.cpmap-test-common-ch }} , cpmap-test mapper dir: ${{ needs.check-values.outputs.cpmap-test-mapper-ch }} ."
          echo "Rules 5 matched."

# WORKS
# IF commit message 'DEPLOYME' -> do NOT run
# IF commit branch is develop OR commit tag is regex match -> run
# This would translate to TEST:cpmap rules (6)!
  run-rules-6:
    needs: check-values
    if: ${{ needs.check-values.outputs.workflow-run == 'true' && github.event.head_commit.message != 'DEPLOYME' && (needs.check-values.outputs.tag-run == 'true' || github.ref_name == 'envvar' ) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run tests
        run: |
          echo "Rules 6 matched."

# IF commit message 'DEPLOYME' -> do NOT run
# IF commit tag is regex match -> do NOT run
# IF commit branch is develop -> do NOT run
# IF branch assoicated with commit AND changes happen on paths OR Pull Request target branch is develop -> run
# This would translate to BUILD:mtu-cpmap and BUILD:navu-cpmap rules (7)!
